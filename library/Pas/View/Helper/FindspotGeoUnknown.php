<?php
/** A view helper for displaying findspots where grid reference is unknown.
 * @category Pas
 * @package Pas_View_Helper
 * @subpackage Abstract
 * @author Daniel Pett
 * @license GNU
 * @version 1
 * @uses Zend_View_Helper_Abstract
 * @uses Pas_Service_Geo_Geoplanet
 * @uses Pas_View_Helper_YahooGeoAdjacent
 */

class Pas_View_Helper_FindspotGeoUnknown
	extends Zend_View_Helper_Abstract {

	/** The auth object
	* @var object $_auth
	*/
	protected $_auth = NULL;

	/** The auth object
	* @var object $_cache
	*/
	protected $_cache = NULL;

	/** The config object
	* @var object $_config
	*/
	protected $_config = NULL;

	/** The geoplanet class object
	* @var object $_geoplanet
	*/
	protected $_geoplanet;

	/** The appid object
	* @var object $_appid
	*/
	protected $_appid = NULL;



	/** The constructor
	 */
	public function __construct()  {
	$this->_auth = Zend_Registry::get('auth');
	$this->_cache = Zend_Registry::get('cache');
	$this->_config = Zend_Registry::get('config');
	$this->_appid = $this->_config->webservice->ydnkeys->placemakerkey;
	$this->_geoplanet = new Pas_Service_Geo_Geoplanet($this->_appid);
    }

    /** Create the findspot with no known geo
     * @param $string
     */
    public function FindspotGeoUnknown($string)  {
    $placeData = $this->_geoplanet->getPlaceFromText($string);
    if(sizeof($placeData) > 0){
    $elevation = $this->_geoplanet->getElevation($placeData['woeid'], $placeData['latitude'], $placeData['longitude']);
    if(is_array($placeData) && is_array($elevation)){
    $placeinfo =  array_merge($placeData, $elevation);
    $this->view->woeid = $placeData['woeid'];
    $this->view->latitude = $placeData['latitude'];
    $this->view->longitude = $placeData['longitude'];
	return $this->buildHtml($placeinfo);
    } else {
    	return false;
    }
    } else {
    	return false;
    }
	}

	/** Function for determining whether elevation is -ve or +ve or =
	 * @param int $elevation
	 * @return string $string
	 */
    public function metres($elevation) {
    switch($elevation) {
    	case ($elevation == 0):
    		$string = 'sea level.';
    		break;
    	case ($elevation > 0):
    		$string = $elevation . ' metres above sea level.';
    		break;
    	case ($elevation < 0):
    		$string = $elevation . ' metres below sea level.';
    		break;
    }
    return $string;
    }

    /** Build the HTML for rendering
     * @param array $data
     * @return string $html
     */
    public function buildHtml($data) {
    $html = '';
    $html .= '<h4>Data from Yahoo! GeoPlanet</h4>';
    $html .= '<p>The spatially enriched data provided here was sourced from the excellent Places/Placemaker service';
    $html .= 'from Yahoo\'s geo team. <strong>It is an autogenerated findspot and therefore should not be used for GIS';
    $html .= ' studies.</strong><br />';
    $html .= $this->view->gridref($data['latitude'],$data['longitude']) . '<br />';
    $html .= 'Latitude: ' . $data['latitude'] . '<br />';
    $html .= 'Longitide: ' . $data['longitude'] . '<br />';
    $html .= 'Settlement type: ' . $data['placeTypeName'] . '<br/>';
    $html .= 'WOEID: ' . $data['woeid'] . '<br/>';
    if(array_key_exists('postal',$data)){
    $html .= 'Postcode: ' . $data['postal'] . '<br/>';
    }
    $html .= 'Country: ' . $data['admin1'] . '<br/>';
    $html .= 'Astergdem generated elevation: ' . $this->metres($data['elevation']);
    $html .= '</p>';
  	$html .= $this->view->YahooGeoAdjacent($data['woeid']);
  	return $html;
    }

}