<?php
class Pas_View_Helper_FindspotGeoUnknown extends Zend_View_Helper_Abstract {
	
	protected $_auth = NULL;
	protected $_cache = NULL;
	protected $_config = NULL;
	protected $_geoplanet;
	protected $_appid = NULL;
	protected $_flickr = NULL;
	protected $_gmapkey = NULL;
	
	public function __construct()  { 
        $this->_auth = Zend_Registry::get('auth');
        $this->_cache = Zend_Registry::get('rulercache');
        $this->_config = Zend_Registry::get('config');
        $this->_appid = $this->_config->webservice->ydnkeys->placemakerkey;
        $this->_geoplanet = new Pas_Service_Geoplanet2($this->_appid);
        $this->_flickr = $this->_config->webservice->flickr_apikey;
        $this->_gmapkey = $this->_config->webservice->googlemaps->apikey; 
    }	
	
    public function FindspotGeoUnknown($string)  {
    $placeData = $this->_geoplanet->getPlaceFromText($string);
    if(sizeof($placeData) > 0){
   // $elevation = $this->_geoplanet->getElevation($placeData['woeid'],$placeData['latitude'],$placeData['longitude']);
    if(is_array($placeData)
//    && is_array($elevation)
    ){
    $placeinfo = 
//    array_merge(
    $placeData
//    ,$elevation)
    ;
    $this->view->woeid = $placeData['woeid'];
    $this->view->latitude = $placeData['latitude'];
    $this->view->longitude = $placeData['longitude'];
	return $this->buildHtml($placeinfo);
    } else {
    	return false;
    }
    } else {
    	return false;
    }
	}
	
    public function metres($elevation) {
    switch($elevation) {
    	case ($elevation == 0):
    		$string = 'sea level.';
    		break;
    	case ($elevation > 0):
    		$string = $elevation . ' metres above sea level.';
    		break;
    	case ($elevation < 0):
    		$string = $elevation . ' metres below sea level.';
    		break;
    }	
    return $string;
    }
    
    public function buildHtml($data) {
    $html = '';
    $html .= '<h4>Data from Yahoo! GeoPlanet</h4>';
    $html .= '<p>The spatially enriched data provided here was sourced from the excellent Places/Placemaker service from Yahoo\'s geo team. <strong>It is an autogenerated findspot and therefore should not be used for GIS studies.</strong><br />
	<img src="'.$this->view->baseUrl().'/images/logos/yahoogeo.jpg" height="89" width="250" alt="Yahoo Geo Developer logo" class="geo">';
    $html .= $this->view->gridref($data['latitude'],$data['longitude']) . '<br />';
    
    $html .= 'Latitude: ' . $data['latitude'] . '<br />';
    $html .= 'Longitide: ' . $data['longitude'] . '<br />';
    $html .= 'Settlement type: ' . $data['placeTypeName'] . '<br/>';
    $html .= 'WOEID: ' . $data['woeid'] . '<br/>';
    if(array_key_exists('postal',$data)){
    $html .= 'Postcode: ' . $data['postal'] . '<br/>'; 
    }
    $html .= 'Country: ' . $data['admin1'] . '<br/>';
   // $html .= 'Astergdem generated elevation: ' . $this->metres($data['elevation']);
    $html .= '</p>';	
    
  	$html .= $this->view->YahooGeoAdjacent($data['woeid']);
    
  	return $html;
    }
	
}